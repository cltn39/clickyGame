{"version":3,"sources":["components/Navbar/index.js","components/Wrapper/index.js","components/Jumbotron/index.js","components/Cards/index.js","components/Footer/index.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","react_default","a","createElement","className","href","this","props","alert","score","topScore","Component","Wrapper","children","Jumbotron","id","style","color","Cards","onClick","imageClick","alt","name","src","image","Footer","App","state","fish","clickedCard","event","currentCard","target","_this","indexOf","setState","sort","b","Math","random","console","log","concat","_this2","components_Navbar","components_Jumbotron","components_Wrapper","map","components_Cards","key","components_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.58096c7a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./Navbar.css\";\r\n\r\nclass Navbar extends Component {\r\n  render() {\r\n    return (\r\n      <nav className=\"navbar navbar-default navbar-fixed-top\">\r\n        <ul>\r\n          <li className=\"itemLeft\"><a href=\"/\">Clicky Memory Test</a></li>\r\n          <li className=\"itemCenter\">{this.props.alert}</li>\r\n          <li className=\"itemRight\">Score: {this.props.score} | Top Score: {this.props.topScore}</li>\r\n        </ul>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\r\n\r\nconst Jumbotron = () => (\r\n  <header className=\"header\">\r\n    {/* Header */}\r\n    <header className=\"masthead\">\r\n      <div className=\"container d-flex h-100 align-items-center\">\r\n        <div className=\"mx-auto text-center\">\r\n          <h1 className=\"title\">Clicky Game</h1>\r\n          <h3 className=\"title\">\r\n            Click on an image to earn points, but don't click on any more than\r\n            once!\r\n          </h3>\r\n        </div>\r\n      </div>\r\n    </header>\r\n    {/* about section */}\r\n    <section id=\"about\" className=\"about-section text-center\">\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <div className=\"col-lg-8 mx-auto\">\r\n            <h2 className=\"text-white mb-4\"  style= {{ color: \" darkgrey \"}} >Built with Create-react-app Bootstrap</h2>\r\n            <p className=\"text-white-50\" style= {{ color: \" darkgrey \"}}>\r\n              Clicky Game is React based memory game. Inspired by the &nbsp;\r\n              <a href=\"https://clicky-game.netlify.com/\">\r\n                example page\r\n              </a>\r\n               &nbsp;that were provided, added personal spin to the UI/game play.\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  </header>\r\n);\r\nexport default Jumbotron;\r\n","import React from \"react\";\r\nimport \"./Cards.css\";\r\n\r\n//pass the image into each card so all 12 are rendered\r\nconst Cards = props => (\r\n  <div className=\"card\" onClick={props.imageClick}>  \r\n        <div className=\"imgBx\">\r\n        <img alt={props.name} src={props.image} />\r\n        </div>\r\n  </div>\r\n);\r\n\r\nexport default Cards;\r\n","import React from \"react\";\r\n\r\nconst Footer = () => (\r\n  <header className=\"footer\">\r\n    {/* footer */}\r\n    <footer className=\"bg-black small text-center text-white-50\">\r\n      <div className=\"container\">Made with <i className=\"fab fa-react\" style={{ color: \"#64a08f\" }}/> with lots of <i className=\"far fa-heart\" style={{ color: \"#64a08f\" }}/>, Chi &copy; 2019</div>\r\n    </footer>\r\n  </header>\r\n);\r\n\r\nexport default Footer;\r\n","import React, { Component } from \"react\";\nimport Navbar from \"./components/Navbar\";\nimport Wrapper from \"./components/Wrapper\";\nimport Jumbotron from \"./components/Jumbotron\";\nimport Cards from \"./components/Cards\";\nimport Footer from \"./components/Footer\";\nimport fish from \"./img.json\"\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    fish,\n    clickedCard: [],\n    alert: \"Click an image to begin!\",\n    score: 0,\n    topScore: 0\n  };\n//when you click on a card ... the fish is taken out of the array\nimageClick = event => {\n  const currentCard = event.target;\n  const cardAlreadyClicked =\n    this.state.clickedCard.indexOf(currentCard) > -1;\n\n//if you click on a fish that has already been selected, the game is reset and cards reordered\n  if (cardAlreadyClicked) {\n    this.setState({\n      fish: this.state.fish.sort(function(a, b) {\n        return 0.8 - Math.random();\n      }),\n      clickedCard: [],\n      score: 0,\n      alert: <span style= {{ color: \"Red\" }}>You guessed incorrectly!</span>\n    });\n\n//if you click on an available fish, your score is increased and cards reordered\n  } else {console.log(event.target)\n    this.setState(\n      {\n        fish: this.state.fish.sort(function(a, b) {\n          return 0.5 - Math.random();\n        }),\n        clickedCard: this.state.clickedCard.concat(\n          currentCard\n        ),\n        alert:<span style= {{ color: \"green\" }}>You guessed correctly!</span>,\n        score: this.state.score + 1,\n        topScore: this.state.score >= this.state.topScore ? (this.state.topScore +1):(this.state.topScore)\n      },\n//if you get all 12 fish corrent you get a congrats message and the game resets        \n      () => {\n        if (this.state.score === 12) {\n          this.setState({\n            fish: this.state.fish.sort(function(a, b) {\n              return 0.5 - Math.random();\n            }),\n            clickedCard: [],\n            score: 0,\n            alert: \"Yay! you win!\"\n          });\n        }\n      }\n    );\n  }\n};\n\n//the order of components to be rendered: navbar, jumbotron, friendcard, footer \nrender() {\n  return (\n    <div>\n      <Navbar \n        score={this.state.score}\n        topScore={this.state.topScore}\n        alert={this.state.alert}\n      />\n      <Jumbotron />\n      <Wrapper>\n        {this.state.fish.map(fish => (\n          <Cards\n            imageClick={this.imageClick}\n            id={fish.id}\n            key={fish.id}\n            image={fish.image}\n          />\n        ))}\n      </Wrapper>\n      <Footer />\n    </div>\n  );\n}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}